#%RAML 1.0

# AMWA NMOS Discovery and Registration Specification: Connection API
# (c) AMWA 2016

title: Connection
baseUri: http://example.api.com/x-nmos/connection/{version}
version: v1.0
mediaType: application/json

documentation:
  - title: Overview
    content: |
      The Connection API is exposed by NMOS Devices as a standard control interface for management of inter-device connnections.
  - title: Endpoint Discovery
    content: |
      The Connection API URL for an NMOS Device is advertised in the list of controls for that device in the Node API, and this information is populated into the NMOS registry via the standard registration mechanism, so it is discoverable through the Query API (see NMOS discovery & registration specification).
  - title: API Structure
    content: |
      This API presents a control interface to a running device instance. Each entity controlled through the API presents four subresources, which are used in the following way:
      * **schema** contains the schema for the entire control parameter set: parameter types, ranges etc.  This is encoded in json-schema v4 format.
      * **staged** provides a path to write new values for the parameters defined by the schema. These parameters can also be read back using HTTP GET.
      * **active** contains the active values of the parameters (read only).
      * **activate** is a resource that loads the staged parameter values into the running device, making them active.

/:
  displayName: Base
  get:
    description: List of paths available from this API
    responses:
      200:
        body:
          example: !include ../examples/v1.0-base-get-200.json
/senders:
  displayName: Senders
  get:
    description: List Senders
    responses:
      200:
        body:
          example: !include ../examples/v1.0-resourcelist-get-200.json
  /{senderId}:
    get:
      description: Get a single Sender
      responses:
        200:
          body:
            example: !include ../examples/v1.0-resource-get-200.json
        404:
          description: Returned when the requested Sender ID does not exist
    /schema:
      get:
        description: Get schema for sender parameters. All parameters in the served schema are compulsory for the client, but the API may implement a subset of the transport parameters according to the sender corresponding sender transport parameters schema. This allows devices that do not support certian features - say FEC - to not present them as options to clients. Clients not wishing to use available features must disable them using the presented parameters. For example in the case of FEC 'fec_enabled' should be set to false. Parameters in the sender object are persitant and may not be deleted or added by the client.
        responses:
          200:
            body:
              examples:
                full: !include ../examples/v1.0-sender-schema.json
                noFec: !include ../examples/v1.0-sender-schema-no-fec.json
                noRtcp: !include ../examples/v1.0-sender-schema-no-rtcp.json
          404:
            description: Returned when the requested resource does not exist
    /staged:
      get:
        description: Get staged sender parameters object
        responses:
          200:
            body:
              description: Will comply with the schema served at /schema
              example: !include ../examples/v1.0-sender-get-200.json
          404:
            description: Returned when the requested resource does not exist
      put:
        description: Update all fields in the sender parameters object. All fields MUST be present.
        body:
          description: PUT must comply with schema served at /schema
          example: !include ../examples/v1.0-sender-stage-put.json
        responses:
          200:
            body:
              description: Will comply with the schema served at /schema
              example: !include ../examples/v1.0-stage-success.json
          400:
            body:
              schema: !include schemas/error.json
              example: !include ../examples/v1.0-stage-fail.json
          404:
            description: Returned when the requested resource does not exist
      patch:
        description: Update staged parameters for sender using RFC 7396 JSON Merge Patch requests. PATCH may not add or remove fields from the object.
        body:
          description: Patch must comply with the schema served at /schema, but no fields are mandatory
          example: !include ../examples/v1.0-sender-patch.json
        responses:
          200:
            body:
              description: Will comply with the schema served at /schema
              example: !include ../examples/v1.0-stage-success.json
          400:
            body:
              schema: !include schemas/error.json
              example: !include ../examples/v1.0-stage-fail.json
          404:
            body:
              description: Returned when the requested resource does not exist
    /active:
      get:
        description: Get active sender parameters
        responses:
          200:
            body:
              example: !include ../examples/v1.0-sender-get-200.json
          404:
            description: Returned when the requested resource does not exist
    /activate:
      get:
        description: Get details of most recent activation request
        responses:
          200:
            body:
              schema: !include schemas/v1.0-activate-confirm-schema.json
              example: !include ../examples/v1.0-activate-success.json
          404:
            description: Returned when the requested resource does not exist
      post:
        description: Post activation object to trigger activation of staged parameters
        body:
          schema: !include schemas/v1.0-activate-schema.json
          example: !include ../examples/v1.0-activate-post.json
        responses:
          200:
            body:
              schema: !include schemas/v1.0-activate-confirm-schema.json
              example: !include ../examples/v1.0-activate-success.json
          202:
            body:
              schema: !include schemas/v1.0-activate-confirm-schema.json
              example: !include ../examples/v1.0-activate-waiting.json
          400:
            body:           
              description: Returned for a mal-formed request
              schema: !include schemas/error.json
              example: !include ../examples/v1.0-activate-error.json
          404:
            description: Returned when the requested resource does not exist
          500:
            body:
              description: Returned when the request was valid, but the activation could not be carried out for some other reason
              schema: !include schemas/v1.0-activate-confirm-schema.json
              example: !include ../examples/v1.0-activate-fail.json
/receivers:
  displayName: Receivers
  get:
    description: List Receivers
    responses:
      200:
        body:
          example: !include ../examples/v1.0-resourcelist-get-200.json
  /{receiverId}:
    get:
      description: Get a single Receiver
      responses:
        200:
          body:
            example: !include ../examples/v1.0-resource-get-200.json
        404:
          description: Returned when the requested resource does not exist
    /schema:
      get:
        description: Get schema for receiver parameters. All parameters in the served schema are compulsory for the client, but the API may implement a subset of the transport parameters and session description according to the sender corresponding receiver transport parameters schema. This allows devices that do not support certian features - say FEC - to not present them as options to clients. Clients not wishing to use available features must disable them using the presented parameters. For example in the case of FEC 'fec_enabled' should be set to false. Parameters in the sender object are persitant and may not be deleted or added by the client.
        responses:
          200:
            body:
              examples:
                full:
                  description: An example for a schema using all possible fields
                  example: !include ../examples/v1.0-receiver-schema.json
                noFec:
                  description: An example for a schema not supporting FEC
                  example: !include ../examples/v1.0-receiver-schema-no-fec.json
                noSessionDescription:
                  description: An example for a schema not supporting session description
                  example: !include ../examples/v1.0-receiver-schema-no-session-description.json
          404:
            description: Returned when the requested resource does not exist
    /staged:
      get:
        description: Get staged receiver parameters object
        responses:
          200:
            body:
              description: Will comply with the schema served at /schema
              example: !include ../examples/v1.0-receiver-get-200.json
          404:
            description: Returned when the requested resource does not exist
      put:
        description: Update all fields in the sender parameters object. All fields MUST be present.
        body:
          description: PUT must comply with schema served at /schema
          example: !include ../examples/v1.0-receiver-stage-put.json
        responses:
          200:
            body:
              description: Will comply with the schema served at /schema
              example: !include ../examples/v1.0-receiver-stage-success.json
          400:
            body:
              schema: !include schemas/error.json
              example: !include ../examples/v1.0-stage-fail.json
          404:
            description: Returned when the requested resource does not exist
      patch:
        description: Update staged parameters for receiver using RFC 7396 JSON Merge PATCH requests. PATCH may not add or remove nodes from the object.
        body:
          description: patch must comply with the schema served at /schema but not all fields are mandatory
          example: !include ../examples/v1.0-receiver-patch.json
        responses:
          200:
            body:
              description: Will comply with the schema served at /schema
              example: !include ../examples/v1.0-receiver-stage-success.json
          400:
            body:
              schema: !include schemas/error.json
              example: !include ../examples/v1.0-stage-fail.json
          404:
            description: Returned when the requested resource does not exist
    /active:
      get:
        description: Get active receiver parameters
        responses:
          200:
            body:
              example: !include ../examples/v1.0-receiver-get-200.json
          404:
            description: Returned when the requested resource does not exist
    /activate:
      get:
        description: Get details of most recent activation request
        responses:
          200:
            body:
              schema: !include schemas/v1.0-activate-confirm-schema.json
              example: !include ../examples/v1.0-activate-waiting.json
          404:
            description: Returned when the requested resource does not exist
      post:
        description: Post activation object to trigger activation of staged parameters
        body:
          schema: !include schemas/v1.0-activate-schema.json
          example: !include ../examples/v1.0-activate-post.json
        responses:
          200:
            body:
              schema: !include schemas/v1.0-activate-confirm-schema.json
              example: !include ../examples/v1.0-activate-success.json
          202:
            body:
              schema: !include schemas/v1.0-activate-confirm-schema.json
              example: !include ../examples/v1.0-activate-waiting.json
          400:
            body:
              description: Returned for a mal-formed request
              schema: !include schemas/error.json
              example: !include ../examples/v1.0-activate-error.json
          404:
            description: Returned when the requested resource does not exist
          500:
            body:
              description: Returned when the request was valid, but the activation could not be carried out for some other reason
              schema: !include schemas/v1.0-activate-confirm-schema.json
              example: !include ../examples/v1.0-activate-fail.json
