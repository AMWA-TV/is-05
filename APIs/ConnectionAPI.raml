#%RAML 1.0

# AMWA NMOS Device Connection Management Specification: Connection API
# (c) AMWA 2017

title: Connection
baseUri: http://example.api.com/x-nmos/connection/{version}
version: v1.1
mediaType: application/json

documentation:
  - title: Overview
    content: |
      The Connection API is exposed by NMOS Devices as a standard control interface for management of inter-device connnections.
  - title: Endpoint Discovery
    content: |
      The Connection API URL for an NMOS Device is advertised in the list of controls for that device in the Node API using type: "urn:x-nmos:control:sr-ctrl/{version}". This information is populated into the NMOS registry via the standard registration mechanism, so it is discoverable through the Query API (see NMOS Discovery and Registration specification).
  - title: API Structure
    content: |
      The API presents two distinct interfaces. A "bulk" interface for controlling multiple senders/receivers, and a "single" interface to control single devices.
/:
  displayName: Base
  get:
    description: List of modes available from this API - single and bulk. Both are compulsory parts of the spec.
    responses:
      200:
        body:
          example: !include ../examples/base-get-200.json
          type: !include schemas/connectionapi-base.json
/bulk:
  displayName: Bulk control interface
  get:
    description: Senders / receivers options
    responses:
      200:
        body:
          example: !include ../examples/bulk-base-get-200.json
          type: !include schemas/connectionapi-bulk.json
  /senders:
    description: Target for bulk staging of transport parameters.
    get:
      responses:
        405:
          description: >
            The API should actively return an HTTP 405 if a GET is called on the
            endpoint.
    options:
      description: A pre-flight check generally used for Cross-Origin Resource Sharing (CORS) purposes
      responses:
        200:
        403:
    post:
      description: Allows staging and activation of multiple sender parameters at the same time in a single request.
      body:
        description: >
          The actual subset of transport parameters used for the patch must be compatible with the
          associated sender's constraints, which may be checked using the individual sender\'s /constraints url.
        type: !include schemas/bulk-sender-post-schema.json
        example: !include ../examples/bulk-sender-post.json
      responses:
        200:
          description: >
            Gives the status of each of the individual senders after the staging.
            Will be returned even if individual `params` did not validate.
            The response object provides the HTTP status code that would have been returned
            by each sender had the request been carried out individually.
          body:
            type: !include schemas/bulk-response-schema.json
            example: !include ../examples/bulk-post-confirm.json
        400:
          description: >
            The body of the request did not validate against the schema (ignoring the content of the
            `params` field - these are validated individually by each sender and failures
            are recorded in the response object for a 200 return).
          body:
            type: !include schemas/error.json
            example: !include ../examples/bulk-post-fail.json
  /receivers:
    description: Target for bulk uploads of transport parameters.
    get:
      responses:
        405:
          description:
            The API should actively return an HTTP 405 if a GET is called on the
            endpoint.
    options:
      description: A pre-flight check generally used for Cross-Origin Resource Sharing (CORS) purposes
      responses:
        200:
        403:
    post:
      description: >
        Allows staging and activation of a subset of multiple
        receiver parameters at the same time in a single request.
      body:
        description: >
          The actual subset of transport parameters used must be compatible with all receivers
          being addressed, which may be checked using the individual receiver\'s /constraints url.
        type: !include schemas/bulk-receiver-post-schema.json
        example: !include ../examples/bulk-receiver-post.json
      responses:
        200:
          description: >
            Gives the status of each of the individual receivers after the staging.
            Will be returned even if individual parameters in `params` did not validate.
            The response object provides the HTTP status code that would have been
            returned by each receiver had the request been carried out individually.
          body:
            type: !include schemas/bulk-response-schema.json
            example: !include ../examples/bulk-post-confirm.json
        400:
          description: >
            The body of the request did not validate against the schema (ignoring the content of the
            `params` field - these are validated individually by each receiver and failures
            are recorded in the response object for a 200 return).
          body:
            type: !include schemas/error.json
            example: !include ../examples/bulk-post-fail.json
/single:
   displayName: Single control interface
   get:
     responses:
       200:
         body:
           example: !include ../examples/single-root.json
           type: !include schemas/connectionapi-single.json
   /senders:
     get:
       description: Sender root
       responses:
         200:
           description: List Available Senders. All UUIDs are appended with / to indicate the ID forms part of the URL for the next layer down.
           body:
             example: !include ../examples/resourcelist-get-200.json
             type: !include schemas/sender-receiver-base.json
     /{senderId}:
         get:
           description: List all the API endpoints for a single sender.
           responses:
             200:
               body:
                 example: !include ../examples/sender-resource-get-200.json
                 type: !include schemas/connectionapi-sender.json
             404:
               description: Returned when the requested Sender ID does not exist.
             409:
               description: Returned when the requested resource is only available at a different API version.
               headers:
                 Location:
                   example: /x-nmos/connection/{version}/single/senders/3b8be755-08ff-452b-b217-c9151eb21193
         /constraints:
           get:
             description: >
               Lists the constraints for each transport parameter (e.g max/min value,
               enumerated values etc.) using a very limited subset of JSON schema.
               Every transport parameter in the staged resource must be represented here.
               Any minimum/maximum constraints listed here must not allow a wider range of values than
               those allowed by the core schema. Any enum defined on this endpoint must only contain a
               subset of the values allowed for that parameter in the core schema. Similarly, pattern
               constraints must only narrow the allowed values. If the sender does
               not constrain parameters beyond what is specified in the core schema then the
               constraints in the core schema should not be duplicated on this endpoint. Where
               an "auto" mode is allowed in the core schema this mode must always be supported by
               the sender if the parameter is exposed.
               If SMPTE 2022-7 is in use, two entries are in the outer array of the resource.
               The first entry is the constraints for the primary leg.
               If SMPTE 2022-7 is not in use only one entry should be present in the outer array.
             responses:
              200:
                 body:
                   type: !include schemas/constraints-schema.json
                   examples:
                     SMPTE2022-7: !include ../examples/sender-constraints-get-200-2022-7.json
                     RTPNo2022-7: !include ../examples/sender-constraints-get-200.json
                     MQTT: !include ../examples/sender-constraints-get-200-mqtt.json
                     WebSocketPlusExt: !include ../examples/sender-constraints-get-200-websocket-ext.json
              404:
                 description: Returned when the requested resource does not exist
              409:
                description: Returned when the requested resource is only available at a different API version.
                headers:
                  Location:
                    example: /x-nmos/connection/{version}/single/senders/3b8be755-08ff-452b-b217-c9151eb21193/constraints
         /staged:
           get:
             description: >
               Get staged sender transport parameters object. In SMPTE 2022-7 operation element 0
               of the `transport_params` array shall be the parameters applied to the primary leg, and
               element 1 the secondary leg. There shall only be one element present in `transport_params`
               when SMPTE 2022-7 is not in use.
             responses:
               200:
                 description: Additionally constrained by the constraints at /constraints
                 body:
                   type: !include schemas/sender-response-schema.json
                   examples:
                     Normal: !include ../examples/sender-get-200.json
                     Uninitialised: !include ../examples/sender-get-200-uninit.json
               404:
                 description: Returned when the requested resource does not exist
               409:
                 description: Returned when the requested resource is only available at a different API version.
                 headers:
                   Location:
                     example: /x-nmos/connection/{version}/single/senders/3b8be755-08ff-452b-b217-c9151eb21193/staged
           options:
             description: A pre-flight check generally used for Cross-Origin Resource Sharing (CORS) purposes
             responses:
               200:
               403:
               404:
           patch:
             description: >
               Update staged parameters for sender.
               Note that for activations the `mode` parameter will return to `null` once the activation
               transaction with the client is completed (i.e the response to the PATCH has been sent by the server).
               In SMPTE 2022-7 operation element 0 of the `transport_params`
               array shall be the parameters applied to the primary leg, and element 1 the secondary leg.
               There shall only be one element present in `transport_params` when SMPTE 2022-7 is not in use.
             body:
               description: >
                PATCH must comply with the constraints served at /constraints but not all fields are mandatory.
                Any fields not included in the request JSON remain unchanged, even if they are a child of a property
                that was included in the request. For example a request containing changes to a single transport parameter
                will not alter any other transport parameter, even though the `transport_params` property was part
                of the request.
               type: !include schemas/sender-stage-schema.json
               examples:
                 immediate-activation: !include ../examples/sender-patch.json
                 relative-scheduled-activation: !include ../examples/sender-patch-relative.json
                 absolute-scheduled-activation: !include ../examples/sender-patch-absolute.json
                 activation-only: !include ../examples/sender-patch-activation-only.json
                 redundant-streams: !include ../examples/sender-patch-redundant-streams.json
                 unicast: !include ../examples/sender-patch-unicast.json

             responses:
               200:
                 description: >
                   A 200 response is returned for PATCH requests where no activation has been scheduled,
                   an activation has been cancelled, or an immediate activation has been requested.
                   The response will always contain the full set of parameters in the response schema, and all
                   supported transport parameters. For a request with an immediate activation the API should
                   only return a response once the new transport parameters have been applied to the underlying sender.
                   Note the presence of the extra `activation_time` parameter in the response. For immediate activation
                   this should be the time the activation actually occurred as an absolute TAI timestamp.
                   If no activation was requested in the PATCH `activation_time` will be set `null`.
                 body:
                   type: !include schemas/sender-response-schema.json
                   examples:
                     immediate-activation: !include ../examples/sender-stage-success.json
                     redundant-streams: !include ../examples/sender-stage-success-redundant-streams.json
               202:
                 description: >
                   A 202 response is returned when a request for a scheduled activation is accepted, to indicate
                   that while the request itself was acceptable it has not yet been acted upon by the sender.
                   For scheduled activations `activation_time` should be the absolute TAI time the parameters
                   will actually transition. For absolute scheduled activations should be the same
                   as the requested time, but may differ if the sender is unable to schedule at
                   the requested time. This may be because the transition may only occur, for example,
                   at a frame boundary or end of GOP. In all other ways this response behaves identically
                   to a 200 response.
                 body:
                   type: !include schemas/sender-response-schema.json
                   examples:
                     relative-scheduled-activation: !include ../examples/sender-stage-relative-success.json
                     absolute-scheduled-activation: !include ../examples/sender-stage-absolute-success.json
               400:
                 description: A 400 response is returned when the request did not meet the schema and constraints.
                 body:
                   type: !include schemas/error.json
                   example: !include ../examples/stage-fail.json
               404:
                 description: Returned when the requested resource does not exist
               409:
                 description: Returned when the requested resource is only available at a different API version.
                 headers:
                   Location:
                     example: /x-nmos/connection/{version}/single/senders/3b8be755-08ff-452b-b217-c9151eb21193/staged
               423:
                 description: >
                   Returned when the resource is locked because an activation has been scheduled.
                   A resource may be unlocked by setting `mode` in `activation` to `null`, which
                   will cancel the pending activation. This may be done in the same request as a change
                   to other parameters.
               500:
                 description: >
                   A 500 response may be returned if the transport file could not be parsed, or there is
                   some failure caused by activation which was not caused by a violation of schema or constraints.
                 body:
                   type: !include schemas/error.json
                   example: !include ../examples/stage-error.json
         /active:
           get:
             description: >
               Get active sender parameters.
               When the `master_enable` parameter is `false` senders should not transmit any media streams.
               For RTP senders the `rtp_enabled` parameter allows for the individual disabling of SMPTE 2022-7
               legs.
               On activation all instances of `auto` must be resolved
               into the actual values that will be used by the sender, unless there is an error condition.
               For example if a sender has the `destination_ip`
               parameter set to `auto` in /staged then `destination_ip` in /active should show the multicast IP
               chosen by the sender. The parameter will remain set to `auto` in staged, and may be resolved to a different
               value on each subsequent activation. In cases, such as `destination_ip`, where the parameter changing unexpectedly
               at activation through re-resolution may be undesirable, care should be taken in implementation
               to manage this.
               If there is an error condition that means `auto` cannot be resolved, the active transport parameters
               must not change, and the underlying sender must continue as before.
             responses:
               200:
                 body:
                   type: !include schemas/sender-response-schema.json
                   examples:
                     NormalRTP: !include ../examples/sender-active-get.json
                     NormalMQTT: !include ../examples/sender-active-get-mqtt.json
                     Uninitialised: !include ../examples/sender-active-get-uninit.json
               404:
                 description: Returned when the requested resource does not exist
               409:
                 description: Returned when the requested resource is only available at a different API version.
                 headers:
                   Location:
                     example: /x-nmos/connection/{version}/single/senders/3b8be755-08ff-452b-b217-c9151eb21193/active
         /transportfile:
           get:
             description: >
               Redirects to the location of the sender's transport file or returns the transport file directly.
               Check HTTP response code to determine which mode of operation is in use. When returning the transport
               file directly ensure that the `Content-Type` entity header is correctly set.
             responses:
               200:
                 description: The transport file itself will be served
               307:
                 description: A temporary redirect to the transport file
               404:
                 description: >
                   Returned if the resource does not exist, or the transport type does not require a transport file,
                   or if the sender is not currently configured.
                   May also be returned when the `master_enable` parameter is `false` in /active, if the sender only maintains
                   a transport file when transmitting.
               409:
                 description: Returned when the requested resource is only available at a different API version.
                 headers:
                   Location:
                     example: /x-nmos/connection/{version}/single/senders/3b8be755-08ff-452b-b217-c9151eb21193/transportfile
         /transporttype:
           get:
             description: >
               Returns the URN base for the transport type employed by this sender with any subclassifications or versions removed.
             responses:
               200:
                 body:
                   type: !include schemas/transporttype-response-schema.json
                   example: !include ../examples/transporttype-get.json
               404:
                 description: >
                   Returned when the resource does not exist
               409:
                 description: Returned when the requested resource is only available at a different API version.
                 headers:
                   Location:
                     example: /x-nmos/connection/{version}/single/senders/3b8be755-08ff-452b-b217-c9151eb21193/transporttype
   /receivers:
     displayName: Receivers
     get:
       description: List available receivers. All UUIDs are appended with / to indicate the ID forms part of the URL for the next layer down.
       responses:
         200:
           body:
             example: !include ../examples/resourcelist-get-200.json
             type: !include schemas/sender-receiver-base.json
     /{receiverId}:
       get:
         description: List API endpoints
         responses:
           200:
             body:
               example: !include ../examples/receiver-resource-get-200.json
               type: !include schemas/connectionapi-receiver.json
           404:
             description: Returned when the requested resource does not exist
           409:
             description: Returned when the requested resource is only available at a different API version.
             headers:
               Location:
                 example: /x-nmos/connection/{version}/single/receivers/3b8be755-08ff-452b-b217-c9151eb21193
       /constraints:
         get:
           description: >
             Lists the constraints for each transport parameter (e.g max/min value,
             enumerated values etc.) using a very limited subset of JSON schema.
             Every transport parameter in the staged resource must be represented here.
             Any minimum/maximum constraints listed here must not allow a wider range of values than
             those allowed by the core schema. Any enum defined on this endpoint must only contain a
             subset of the values allowed for that parameter in the core schema. Similarly, pattern
             constraints must only narrow the allowed values. If the receiver does
             not constrain parameters beyond what is specified in the core schema then the
             constraints in the core schema should not be duplicated on this endpoint. Where
             an "auto" mode is allowed in the core schema this mode must always be supported by
             the receiver if the parameter is exposed.
             If SMPTE 2022-7 is in use, two entries are in the outer array of the resource.
             The first entry is the constraints for the primary leg.
             If SMPTE 2022-7 is not in use only one entry should be present in the outer array.
           responses:
             200:
               body:
                 type: !include schemas/constraints-schema.json
                 examples:
                   SMPTE2022-7: !include ../examples/receiver-constraints-get-200-2022-7.json
                   RTPNo2022-7: !include ../examples/receiver-constraints-get-200.json
                   MQTT: !include ../examples/receiver-constraints-get-200-mqtt.json
                   WebSocketPlusExt: !include ../examples/receiver-constraints-get-200-websocket-ext.json
             404:
               description: Returned when the requested resource does not exist
             409:
               description: Returned when the requested resource is only available at a different API version.
               headers:
                 Location:
                   example: /x-nmos/connection/{version}/single/receivers/3b8be755-08ff-452b-b217-c9151eb21193/constraints
       /staged:
         get:
           description: >
             Get staged receiver transport parameters object. In SMPTE 2022-7 operation element 0
             of the `transport_params` array shall be the parameters applied to the primary leg, and
             element 1 the secondary leg. There shall only be one element present in `transport_params`
             when SMPTE 2022-7 is not in use.
           responses:
             200:
               description: Additionally constrained by the constraints at /constraints
               body:
                 type: !include schemas/receiver-response-schema.json
                 examples:
                   Normal: !include ../examples/receiver-get-200.json
                   Pending: !include ../examples/receiver-pending-get-200.json
                   Uninitialised: !include ../examples/receiver-get-200-uninit.json
             404:
               description: Returned when the requested resource does not exist
             409:
               description: Returned when the requested resource is only available at a different API version.
               headers:
                 Location:
                   example: /x-nmos/connection/{version}/single/receivers/3b8be755-08ff-452b-b217-c9151eb21193/staged
         options:
           description: A pre-flight check generally used for Cross-Origin Resource Sharing (CORS) purposes
           responses:
             200:
             403:
             404:
         patch:
           description: >
             Update staged parameters for receiver.
             Note that for activations the `mode` parameter will return to `null` once the activation
             transaction with the client is completed (i.e the response to the PATCH has been sent by the server).
             When a transport file is staged the parameters in that transport file should be propagated to
             their corresponding transport parameters and the response should show these updated values.
             On activation the value of the entries in `transport_parameters` must be used to program
             the receiver, not those in the transport file directly. However while the transport file is still present
             (i.e `data` is not `null`) media parameters in the transport file should be applied to the
             receiver. Setting `data` to `null` has no impact on the `transport_parameters` array, or
             any other property.
             Where a transport file has been staged the transport
             parameters in the response will reflect the new values assigned to them by the transport file.
             The transport parameters should be updated from the transport file in `data` on every PATCH
             request that includes the `data` field. Even if the value of `data` in the request
             matches the value of `data` currently stored in the API the transport parameters are still re-populated.
             In the case where the transport file and transport parameters are updated in the same PATCH request
             transport parameters specified in the request object take precedence over those in the transport file.
             In SMPTE 2022-7 operation element 0 of the `transport_params`
             array shall be the parameters applied to the primary leg, and element 1 the secondary leg.
             There shall only be one element present in `transport_params` when SMPTE 2022-7 is not in use.
           body:
             description: >
              PATCH must comply with the constraints served at /constraints but not all fields are mandatory.
              Any fields not included in the request JSON remain unchanged, even if they are a child of a property
              that was included in the request. For example a request containing changes to a single transport parameter
              will not alter any other transport parameter, even though the `transport_params` property was part
              of the request.
             type: !include schemas/receiver-stage-schema.json
             examples:
               activate-immediate: !include ../examples/receiver-patch.json
               activate-scheduled-relative: !include ../examples/receiver-patch-relative.json
               activate-scheduled-absolute: !include ../examples/receiver-patch-absolute.json
               activation-only: !include ../examples/receiver-patch-activation-only.json
               stage-transportfile: !include ../examples/receiver-patch-transportfile.json
               redundant-streams: !include ../examples/receiver-patch-redundant-streams.json
               unicast: !include ../examples/receiver-patch-unicast.json
           responses:
             200:
               description: >
                 A 200 response is returned for PATCH requests where no activation has been scheduled,
                 an activation has been cancelled, or an immediate activation has been requested.
                 The response will always contain the full set of parameters in the response schema, and all
                 supported transport parameters. For a request involving an immediate activation the API
                 should only return once the transport parameters have been applied to the underlying receiver.
                 Note the presence of the extra `activation_time` parameter in the response. For immediate activation
                 this should be the time the activation actually occurred as an absolute TAI timestamp.
                 If no activation was requested in the `activation_time` will be set `null`.
               body:
                 type: !include schemas/receiver-response-schema.json
                 examples:
                   activate-immediate: !include ../examples/receiver-stage-success.json
                   stage-transportfile: !include ../examples/receiver-stage-scheduled-transportfile.json
                   redundant-streams: !include ../examples/receiver-stage-success-redundant-streams.json
             202:
               description: >
                 A 202 response is returned when a request for a scheduled activation is accepted, to indicate
                 that while the request itself was acceptable it has not yet been acted upon by the receiver.
                 For scheduled activations `activation_time` should be the absolute TAI time the parameters
                 will actually transition. For absolute scheduled activations should be the same
                 as the requested time, but may differ if the receiver is unable to schedule at
                 the requested time. This may be because the transition may only occur, for example,
                 at a frame boundary or end of GOP. In all other ways this response behaves identically
                 to a 200 response.
               body:
                 type: !include schemas/receiver-response-schema.json
                 examples:
                   activate-scheduled-relative: !include ../examples/receiver-stage-scheduled-relative.json
                   activate-scheduled-absolute: !include ../examples/receiver-stage-scheduled-absolute.json
             400:
                description: A 400 response is returned when the request did not meet the schema and constraints.
                body:
                  type: !include schemas/error.json
                  example: !include ../examples/stage-fail.json
             404:
               description: Returned when the requested resource does not exist
             409:
               description: Returned when the requested resource is only available at a different API version.
               headers:
                 Location:
                   example: /x-nmos/connection/{version}/single/receivers/3b8be755-08ff-452b-b217-c9151eb21193/staged
             423:
               description: >
                 Returned when the resource is locked because an activation has been scheduled.
                 A resource may be unlocked by setting `mode` in `activation` to `null`, which
                 will cancel the pending activation. This may be done in the same request as a change
                 to other parameters.
             500:
               description: >
                 A 500 response may be returned if the transport file could not be parsed, or there is
                 some failure caused by activation which was not caused by a violation of schema or constraints.
               body:
                 type: !include schemas/error.json
                 example: !include ../examples/stage-error.json
       /active:
         get:
           description: >
             Get active receiver parameters.
             When the `master_enable` parameter is `false` receivers should not process any incoming streams, and
             should unsubscribe from any multicast streams they are receiving. For RTP receivers the
             `rtp_enabled` parameter allows for the individual disabling of SMPTE 2022-7 legs.
             On activation all instances of `auto` must be resolved
             into the actual values that will be used by the receiver, unless there is an error condition.
             For example if a receiver has the `interface_ip`
             parameter set to `auto` in /staged then `interface_ip` in /active should show the IP address of the interface
             chosen by the receiver. The parameter will remain set to `auto` in staged, and may be resolved to a different
             value on each subsequent activation. In cases, such as `interface_ip`, where the parameter changing unexpectedly
             at activation through re-resolution may be undesirable, care should be taken in implementation
             to manage this.
             If there is an error condition that means `auto` cannot be resolved, the active transport parameters
             must not change, and the underlying receiver must continue as before.
           responses:
             200:
               body:
                 type: !include schemas/receiver-response-schema.json
                 examples:
                   NormalRTP: !include ../examples/receiver-active-get-200.json
                   NormalMQTT: !include ../examples/receiver-active-get-200-mqtt.json
                   Uninitialised: !include ../examples/receiver-active-get-200-uninit.json
             404:
               description: Returned when the requested resource does not exist
             409:
               description: Returned when the requested resource is only available at a different API version.
               headers:
                 Location:
                   example: /x-nmos/connection/{version}/single/receivers/3b8be755-08ff-452b-b217-c9151eb21193/active
       /transporttype:
         get:
           description: >
             Returns the URN base for the transport type employed by this receiver with any subclassifications or versions removed.
           responses:
             200:
               body:
                 type: !include schemas/transporttype-response-schema.json
                 example: !include ../examples/transporttype-get.json
             404:
               description: Returned when the resource does not exist
             409:
               description: Returned when the requested resource is only available at a different API version.
               headers:
                 Location:
                   example: /x-nmos/connection/{version}/single/receivers/3b8be755-08ff-452b-b217-c9151eb21193/transporttype
